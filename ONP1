#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <ctype.h>
#include <string.h>
#define SIZE 50



struct stack_node
{
    double data;
    struct stack_node* next;
};


bool push(struct stack_node** top, double number);
double pop(struct stack_node** top);
void enter_the_expression(char* exp);
double calculate_rpn_expression(char* exp);
void print_result(struct stack_node* top, char* exp, double result);
int priority(char c);
void convert_to_rpn(char* exp);





//----------------------------------------------------------------------------------------------------
int main()
{
    system("CHCP 1250 > NUL");
    char exp[SIZE];
    enter_the_expression(exp);
    convert_to_rpn(exp);
    //calculate_rpn_expression(exp);

    return 0;
}

bool push(struct stack_node** top, double number)
{
    struct stack_node* new_node = (struct stack_node*)malloc(sizeof(struct stack_node));
    if (new_node != NULL)
    {
        new_node->data = number;
        new_node->next = *top;
        *top = new_node;
        return true;
    }
    return false;
};

double pop(struct stack_node** top)
{
    double result = 0.0;
    if (*top)
    {
        result = (*top)->data;
        struct stack_node* tmp = (*top)->next;
        free(*top);
        (*top) = tmp;
    }
    return result;
}

void enter_the_expression(char* exp)
{
    printf("Podaj wyrażenie algebraiczne:\n");
    fgets(exp, SIZE, stdin);
}

void print_result(struct stack_node* top, char* exp, double result)
{
    int i = 0;
    printf("(ONP): ");
    while (exp[i] != '\0')
    {
        printf("%c", exp[i]);
        i++;
    }
    printf(" = %lf\n", pop(&top));
    //printf("(ONP): %s  = %lf", exp, pop(&top));      // wypisanie wartosci ONP
}


double calculate_rpn_expression(char* exp)
{
    struct stack_node* top = NULL;
    char temp[SIZE];

    memset(temp, 0, SIZE * sizeof(char));  //zerowanie tymczasowej tablicy przechowujacej liczbe
    unsigned int i = 0, counter = 0;
    double result = 0, temp_value = 0, first_argument = 0, second_argument = 0;
    for (i = 0; i < strlen(exp); i++)
    {
        if (isdigit(exp[i]) || exp[i] == '.')
            temp[counter++] = exp[i];                       // przepisywanei cyfry do tablicy, ktora bedzie ją przechowywac
        else if (exp[i] != '+' && exp[i] != '-' && exp[i] != '*' && exp[i] != '/' && exp[i] != '^' && strlen(temp) > 0)
        {
            temp_value = atof(temp);                        // zamiana liczby z ciagu znakow na liczbe
            printf("temp_value = %.4lf\n", temp_value);
            if (temp_value != 0)                             // nie umieszczamy 0 na stosie
                push(&top, temp_value);                     // umieszczenie liczby na stosie
            memset(temp, 0, SIZE);                          //zerowanie tablicy zeby moc umiescic w niej nowa liczbe z ciagu
            counter = 0;                                    // zerowanie licznika
        }
        else
        {
            switch (exp[i])
            {
            case '+':
                result = pop(&top) + pop(&top);
                printf("result = %lf\n", result);
                push(&top, result);
                break;
            case '-':
                first_argument = pop(&top);
                second_argument = pop(&top);
                result = second_argument - first_argument;
                printf("result = %lf\n", result);
                push(&top, result);
                break;
            case '*':
                result = pop(&top) * pop(&top);
                printf("result = %lf\n", result);
                push(&top, result);
                break;
            case '/':
                first_argument = pop(&top);
                second_argument = pop(&top);
                result = second_argument / first_argument;
                printf("result = %lf\n", result);
                push(&top, result);
                break;
            case '^':
                result = pow(pop(&top), pop(&top));
                printf("result = %lf\n", result);
                push(&top, result);
                break;
            default:
                continue;
            }

        }
    }

    print_result(top, exp, result);
    return 0;
}

int priority(char c)
{
    switch (c)
    {
    case '+':;
    case '-': return 1;
    case '*':;
    case '/': return 2;
    case '^': return 3;
    }
    return 0;
}

void convert_to_rpn(char* exp)
{
    char stack[SIZE], exit[SIZE];
    memset(stack, 0, SIZE * sizeof(char));
    memset(exit, 0, SIZE * sizeof(char));
    int counter = 0, counter_2 = 0, i = 0;
    char c;

    while (true)
    {
        c = exp[i++];
        if (c == '\n')
        {
            while (counter)
                exit[counter_2++] = stack[--counter];
            break;
        }

        switch (c)
        {
        case ' ':
            exit[counter_2++] = c;
            break;
        case '(':
            stack[counter++] = '(';
            break;
        case ')':
            while (stack[counter - 1] != '(')
                exit[counter_2++] = stack[--counter];
            counter--;
            break;
        case '+':;
        case '-':;
        case '*':;
        case '/':;
        case '^':
            while (counter)
            {
                if (priority(c) == 3 || (priority(c) > priority(stack[counter - 1]))) break;
                exit[counter_2++] = stack[--counter];
            }
            stack[counter++] = c;
            break;
        default:
            exit[counter_2++] = c;
            break;
        }


    }

    memset(exp, 0, SIZE * sizeof(char));
    strncpy_s(exp, SIZE * sizeof(char), exit, SIZE);
    printf("exp = %s\n", exp);

}

